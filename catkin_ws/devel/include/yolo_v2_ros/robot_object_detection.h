// Generated by gencpp from file yolo_v2_ros/robot_object_detection.msg
// DO NOT EDIT!


#ifndef YOLO_V2_ROS_MESSAGE_ROBOT_OBJECT_DETECTION_H
#define YOLO_V2_ROS_MESSAGE_ROBOT_OBJECT_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolo_v2_ros
{
template <class ContainerAllocator>
struct robot_object_detection_
{
  typedef robot_object_detection_<ContainerAllocator> Type;

  robot_object_detection_()
    : xCor(0.0)
    , yCor(0.0)
    , width(0.0)
    , height(0.0)
    , prob(0.0)
    , className()  {
    }
  robot_object_detection_(const ContainerAllocator& _alloc)
    : xCor(0.0)
    , yCor(0.0)
    , width(0.0)
    , height(0.0)
    , prob(0.0)
    , className(_alloc)  {
  (void)_alloc;
    }



   typedef double _xCor_type;
  _xCor_type xCor;

   typedef double _yCor_type;
  _yCor_type yCor;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _prob_type;
  _prob_type prob;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _className_type;
  _className_type className;




  typedef boost::shared_ptr< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> const> ConstPtr;

}; // struct robot_object_detection_

typedef ::yolo_v2_ros::robot_object_detection_<std::allocator<void> > robot_object_detection;

typedef boost::shared_ptr< ::yolo_v2_ros::robot_object_detection > robot_object_detectionPtr;
typedef boost::shared_ptr< ::yolo_v2_ros::robot_object_detection const> robot_object_detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yolo_v2_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'yolo_v2_ros': ['/home/ozerbiber/catkin_ws/src/yolo_v2_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d81138f0c7b661d447966433c975998";
  }

  static const char* value(const ::yolo_v2_ros::robot_object_detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d81138f0c7b661dULL;
  static const uint64_t static_value2 = 0x447966433c975998ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_v2_ros/robot_object_detection";
  }

  static const char* value(const ::yolo_v2_ros::robot_object_detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xCor\n\
float64 yCor\n\
float64 width\n\
float64 height\n\
float64 prob\n\
string className\n\
";
  }

  static const char* value(const ::yolo_v2_ros::robot_object_detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xCor);
      stream.next(m.yCor);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.prob);
      stream.next(m.className);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_object_detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo_v2_ros::robot_object_detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo_v2_ros::robot_object_detection_<ContainerAllocator>& v)
  {
    s << indent << "xCor: ";
    Printer<double>::stream(s, indent + "  ", v.xCor);
    s << indent << "yCor: ";
    Printer<double>::stream(s, indent + "  ", v.yCor);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "prob: ";
    Printer<double>::stream(s, indent + "  ", v.prob);
    s << indent << "className: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.className);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_V2_ROS_MESSAGE_ROBOT_OBJECT_DETECTION_H
